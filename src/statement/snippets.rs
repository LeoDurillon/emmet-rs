use std::collections::HashMap;

pub struct Snippet {
  value:String,
  replace:String
}

const BASE_SNIPPET: [(&str, &str); 172] =[
  ("e",""),
  ("a","a:href"),
  ("a:blank", "a:href=${0}:target=_blank:rel=noopener noreferrer"),
  ("a:link","a:href=${0}"),
  ("abbr","abbr:title"),
  ("acr","acronym:title"),
  ("acronym","acronym:title"),
  ("base","base:title/"),
  ("base","base:href/"),
  ("basefont","basefont/"),
  ("br","br/"),
  ("frame","frame/"),
  ("hr","hr/"),
  ("bdo","bdo:dir"),
  ("bdo:r","bdo:dir=rtl"),
  ("bdo:l","bdo:dir=ltr"),
  ("col","col/"),
  ("link","link:rel=stylesheet:href/"),
  ("link:css","link:href/"),
  ("link:print","link:href:media=print/"),
  ("link:favicon","link:rel=icon:type=image/x-icon:href"),
  ("link:favicon","link:rel=icon:type=image/x-icon:href"),
  ("link:mf","link:rel=manifest:href"),
  ("link:manifest","link:rel=manifest:href"),
  ("link:touch","link:rel=apple-icon:href"),
  ("link:im","link:rel=import:href"), 
  ("link:import","link:rel=import:href"), 
  ("meta","meta/"),
  ("meta:utf","meta:http-equiv=Content-Type:content=text/html;charser=UTF-8/"), 
  ("meta:vp","meta:name=viewport:content=width,initial-scale=${2}/"),
  ("meta:compat","meta:http-equiv=X-UA-Compatible:content]"),
	("meta:edge","meta:compat:content"),
  ("meta:redirect", "meta:http-equiv=refresh:content='0;:url'"),
	("meta:refresh", "meta:http-equiv=refresh:content"),
	("meta:kw", "meta:name=keywords:content"),
	("meta:desc", "meta:name=description:content"),
  ("script:module","script:type=module"),
  ("img","img:src:alt"),
  ("img:s","img:srcset:src:alt"),
  ("img:srcset","img:srcset:src:alt"),
  ("img:z","img:sizes:srcset:src:alt"),
  ("img:sizes","img:sizes:srcset:src:alt"),
  ("src","source/"),
  ("src:sc","source:src:type/"),
  ("source:sc","source:src:type/"),
  ("src:s","source:srcset"),
  ("source:s","source:srcset"),
  ("src:t","source:srcset:type=image"),
  ("source:t","source:srcset:type=image"),
  ("src:z","source:sizes:srcset"),
  ("source:z","source:sizes:type"),
  ("src:m","source:media:srcset"),
  ("source:m","source:media:srcset"),
  ("src:mt","source:media:type"),
  ("source:mt","source:media:type"),
  ("src:mz","source:media:sizes:srcset"),
  ("source:mz","source:media:sizes:srcset"),
  ("src:zt","source:sizes:srcset:type"),
  ("source:zt","source:sizes:srcset:type"),
  ("iframe","iframe:src:frameborder=0/"),
  ("embed","embed:src:type/"),
  ("object","object:data:type/"),
  ("param","param:name:value"),
  ("map","map:name"),
  ("area","area:shape:coords:href:alt"),
  ("area:d","area:shape=default:coords:href:alt"),
  ("area:c","area:shape=circle:coords:href:alt"),
  ("area:r","area:shape=rect:coords:href:alt"),
  ("area:p","area:shape=poly:coords:href:alt"),
  ("form","form:action"),
  ("form:get","form:action=get"),
  ("form:post","form:action=post"),
  ("label","label:for"),
  ("input","input:type/"),
  ("inp","input:type:name:id/"),
  ("input:h","input:type=hidden:name:id/"),
  ("input:hidden","input:type=hidden:name:id/"),
  ("input:t","input:type=text:name:id/"),
  ("input:search","input:type=search:name:id/"),
  ("input:email","input:type=email:name:id/"),
  ("input:url","input:type=url:name:id/"),
  ("input:p","input:type=password:name:id/"),
  ("input:password","input:type=password:name:id/"),
  ("input:datetime","input:type=datetime:name:id/"),
  ("input:date","input:type=date:name:id/"),
  ("input:datetime-local","input:type=datetime-local:name:id/"),
  ("input:month","input:type=month:name:id/"),
  ("input:week","input:type=week:name:id/"),
  ("input:time","input:type=time:name:id/"),
  ("input:tel","input:type=tel:name:id/"),
  ("input:number","input:type=number:name:id/"),
  ("input:color","input:type=color:name:id/"),
  ("input:c","input:type=checkbox:name:id/"),
  ("input:checkbox","input:type=checkbox:name:id/"),
  ("input:r","input:type=radio:name:id/"),
  ("input:radio","input:type=radio:name:id/"),
  ("input:range","input:type=range:name:id/"),
  ("input:f","input:type=file:name:id/"),
  ("input:file","input:type=file:name:id/"),
  ("input:submit","input:type=submit:value/"),
  ("input:i","input:type=image:name:id:src:alt/"),
  ("input:image","input:type=image:name:id:src:alt/"),
  ("input:b","input:type=button:value/"),
  ("input:btn","input:type=button:value/"),
  ("input:button","input:type=button:value/"),
  ("input:reset","input:type=reset/"),
  ("select","select:name:id"),
  ("select:d","select:disabled;"),
  ("opt","option:value"),
  ("option","option:value"),
  ("textarea","textarea:name:id"),
  ("tarea:c","textarea:name:id:cols"),
  ("tarea:r","textarea:name:id:rows"),
  ("tarea:cr","textarea:name:id:cols:rows"),
  ("marquee","marquee:behavior:direction"),
  ("menu:c","menu:type=context"),
  ("menu:context","menu:type=context"),
  ("menu:t","menu:type=toolbar"),
  ("video","video:src"),
  ("audio","audio:src"),
  ("keygen","keygen/"),
  ("command","command/"),
  ("btn:s","button:type=submit"),
  ("button:s","button:type=submit"),
  ("button:submit","button:type=submit"),
	("btn:r","button:type=reset"),
  ("button:r","button:type=reset"),
  ("button:reset","button:type=reset"),
	("btn:b","button:type=button"),
  ("button:b","button:type=button"),
  ("button:button","button:type=button"),
	("btn:d","button:disabled;"),
  ("button:d","button:disabled;"),
  ("button:disabled","button:disabled;"),
	("fst:d","fieldset:disabled;"),
  ("fset:d","fieldset:disabled;"),
  ("fieldset:d","fieldset:disabled;"),
  ("fieldset:disabled","fieldset:disabled;"),
	("bq","blockquote"),
	("fig","figure"),
	("figc","figcaption"),
	("pic","picture"),
	("ifr","iframe"),
	("emb","embed"),
	("obj","object"),
	("cap","caption"),
	("colg","colgroup"),
	("fst","fieldset"),
	("btn","button"),
	("optg","optgroup"),
	("tarea","textarea"),
	("leg","legend"),
	("sect","section"),
	("art","article"),
	("hdr","header"),
	("ftr","footer"),
	("adr","address"),
	("dlg","dialog"),
	("str","strong"),
	("prog","progress"),
	("mn","main"),
	("tem","template"),
	("fset","fieldset"),
	("datal","datalist"),
	("kg","keygen"),
	("out","output"),
	("det","details"),
	("sum","summary"),
	("cmd","command"),
	("data","data:value"),
	("meter","meter:value"),
	("time","time:datetime")
];


impl Snippet {
  pub fn get() -> HashMap<&'static str, &'static str> {
     HashMap::from(BASE_SNIPPET)
  }
}